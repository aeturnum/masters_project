\begin{figure*}[hbt]
\ifnextchar[{\eatarg}{}

      \centering
      \includegraphics{EDEN_diagram}
    \end{figure}

   \subsection*{Why EDEN}
   I selected \acrshort{eden} for this project for two primary reasons: it is a \acrlong{foss} software project in a language I am familiar with and it is not obviously problematic. I will detail its open source pedigree shortly, but first I want to explain my second selection criteria. "Improving" software (whatever improving means) can usefully be separated into at least two questions: what quality should change and how do you bring that change about? This project attempts only to speak about the second (likely easier) question. Partially this is because the project was designed to fit within the confines of a final project for a masters degree. This project represents, roughly, three graduate level classes worth of work. I didn't feel like I had time to find \textit{and} fix flaws. So this project should be understood as neutral on the question of, "is \acrshort{eden} good?" Nothing about \acrshort{eden} seems bad to me. They have received numerous awards, glowing testimonials, and are used by many large organizations that could use other products if \acrshort{eden} were lacking.

   I lack the experience and expertise to say that I think \acrshort{eden} is \textit{good}. Assessing if software is "good" or "bad" is not straightforward. Simply examining \glspl{sa} in isolation tell us very little. It's only through engaging with one or more \gls{sa}(s) as they exist in the lived world and contextualizing that with detailed ethnographic work that it's possible to start making value judgments \citep{Eubanks2018-hc,Schull2012-nc}. Those judgments wouldn't be universal, of course, but would be about a particular population. So this paper is done from the perspective that \acrshort{eden} seems fine to me. The project is interested in the technical details of how the \acrshort{eden} \gls{sa} emerges out of its \gls{so} and how agency is modified by that process.

   Finally, and briefly, this project does not take the position that the technical qualities it investigates are free from the impact of social structures. \citet{Gabriella_Coleman2012-lq} and \citet{Kelty2008-jm} have both compellingly shown that the social and technical co-produce each other. However, we can still usefully speak about qualities that technical systems have and how those qualities impact our lived experience. That this project has obvious extensions in the social and ethnographic realm is a strength and declining to investigate them should be understood as a concession to time.

   \subsection*{Out of Many, One}
   Wherever possible, \acrshort{eden} uses \acrshort{foss} technologies. The language it is written in, the libraries it relies on to provide functionality, the tools it uses to support its functionality, and its main operating system are all both open source and available at no cost. \acrshort{eden} will generally operate on top of non-\acrshort{foss} systems like Microsoft Windows, but the team doesn't prioritize systems outside of the \acrshort{foss} systems they develop and test on \citep{Sahana_Foundation2015-zs}. \citet{Kelty2008-jm} talks about how \acrshort{foss} is both a philosophy and a system of development that has practical impacts. One of the side effects of \acrshort{eden} committing to use the \acrshort{foss} ecosystem is it makes my form of engagement possible. Though it is possible to examine compiled machine code and draw some conclusions about the intent and process that assembled it, such a project would be far outside my capabilities. Instead, the source code of \acrshort{eden}, web2py (the \gls{web framework} \acrshort{eden} uses), Python (the language \acrshort{eden} and web2py are written in) and all of the libraries used by the project are open source. Their preferred databases (MySql or PostgreSQL) are also fully open source projects. Open source projects often don't just publish the current source code, but offer full histories of what change, when it changed, who changed it and how it was changed. These changes often include notes about why \textit{that particular} change was made over any other possible change \citep[p. 13-16]{Chacon2014-im}. Open source projects also commonly have systems for tracking lists of unfixed flaws as well as planned future improvements (both types of \citet{Mackenzie2006-hb} relationships), but those systems operate above the layer of source code so this project does not engage with them.

  \section*{Investigating EDEN}
   My work began, as all software work does, with work of assembling the components that transform \acrshort{eden} from a collection of \gls{python} source files into a \gls{sa}. This requires connecting a number of components together: libraries and tools in the gls{python} language and a wider set of heterogeneous tools (databases, non-\gls{python} libraries and tools). Some of these components remain as source code to be interpreted by \gls{python}, some of them are downloaded as source code and go through their own assembly process to generate their own \glspl{sa}. The assembly process that draws the components of \acrshort{eden} together does not happen in a single step, but is a number of loosely ordered heterogeneous processes. Some must be completed before others and there is an officially recommended order in which to prepare the various components, but often these orders are more matters of preference than necessity. What is important is that all of the required components are collected in their expected places by the time \acrshort{eden} itself is run.

   The \gls{sf} recommends that developers use a \gls{vm} that has \acrshort{eden} and its supporting libraries installed through a script. However, at the time that I engaged with the project, the instructions for how to install \acrshort{eden} focused on using operating systems and \gls{python} versions that have since stopped being updated\sepfootnote{softwareupdates}. Though more modern scripts can be found, the standard install scripts for the \acrshort{eden} \gls{vm} and the script to install the software on a physical machine both use operating systems released in the mid-2010s that have not been maintained for at least 5 years \citep{Canonical2020-ru}. However, \acrshort{eden} is aware that this is problematic and makes an effort to support newer versions of \gls{python} and newer operating systems, but official instructions to use the latest software are sparse.

   Choosing to offer a fixed and unusually old set of tools is the first materialized I found encoded into \acrshort{eden}\sepfootnote{whatiseden}. The state of the scripts reflect a culturally important choice. The team could note and situate their approach in their documentation, but they have not. However, project-wise choices to use older or newer versions of tools are common. There are software projects (sometimes entire programming languages) that greatly value using the most up to date version of a tool or library \citep{Fernandes_da_Costa2017-mh}. These communities have legitimate fear that older versions of tools are examined less often and will likely be fixed less frequently. They feel that using the latest (within reason) version is a goodness in of itself\sepfootnote{releaselanguage}. If the \acrshort{eden} team followed this philosophy, they would not default to using older operating systems and versions of \gls{python}. They would need to watch their ecosystem of tools and libraries more closely, but the versions they were watching would also be more in the collective consciousness of the \acrshort{foss} world.

   All this isn't to say that the \acrshort{eden} team choice isn't a sensible one. The latest versions of tools often lose track of the world outside the top of the capitalist pyramid. The same networks of power that structure the spread of physical technology also shape the attention of active software engineers. \acrshort{eden} has chosen to use established and well-supported versions of their tools\sepfootnote{stablecaveat}. Their older set of tools is more likely to have undiscovered (or unpatched) security vulnerabilities, but they are virtually certain to function properly and immediately allow the successful assembly of an \acrshort{eden} \gls{sa}. That set of probabilities seems very well suited to the expected audience for individuals first setting up their own copies of \acrshort{eden}: individual developers setting the system up to better understand it. When another team decides to deploy their own copy of \acrshort{eden} in a way that's available to the public, they can assemble that \gls{sa} using a balance of newness and stability that feels comfortable to them\sepfootnote{updaterisk}.

   \subsection*{Investigating Assembly}
   It's one thing to identify where the \acrshort{eden} install scripts sit in a cultural gradient. It's another to engage the particular choices that the \acrshort{eden} project has made. I chose to install a far newer set of tools, based on the projects newest recommendations for new installs \citep{Konig2019-ya}. I was guided by the \gls{python} 2.7 installation script provided on the Sahana \acrshort{eden} wiki\sepfootnote{edensetup}. However, I chose to use a version of \gls{python} originally released in 2016 (six years after the default version used by \acrshort{eden}). Using a newer version of python seemed like a sensible software engineering choice and also a way to check if \acrshort{eden} was, as they claim, able to operate equally well on the version I selected (3.6.9) and the 2.7 version that \acrshort{eden} uses by default\sepfootnote{pythonversion}.

   Selecting a more modern \gls{python} turned out to have knock-on effects. Some of the libraries that \acrshort{eden} requires are written only for \gls{python} 2.7 and replacements were needed to function with 3.6. One of the major changes was that the version of \gls{w2p} the \acrshort{eden} scripts installs does not support \gls{python} 3.6 and so I needed to chose an updated version. I selected 2.18.5, but this new combination of the \acrshort{eden} source code and the \gls{w2p} source code revealed that the two projects had drifted apart in small but essential ways. Specifically, in a section of the \gls{w2p} and \acrshort{eden} code that handled data validation.

   Data validation is, in general, the work of verifying that information conforms to a set of standards and informing the user how it has failed to conform when a problem is found. This should always be performed any time data is stored in a system. Digital storage systems have expectations that, when violated, can cause immediate systems failures. Web frameworks commonly provide facilities for verifying data and \gls{w2p} is no exception. \gls{w2p} has components that will check that that user input can be converted to numbers or dates or email addresses, among others. \gls{w2p} is open source and so all of that functionality can be expanded by programs that make use of \gls{w2p} and \acrshort{eden} does so in a number of places.

   In between the version of \gls{w2p} that \acrshort{eden} uses by default and the version of \gls{w2p} that I selected, the control flow of data validation has changed slightly. This change meant that custom data validation classes that were written using the older \gls{w2p} system no longer fit into the expected control flow of data validation. The \acrshort{eden} data validation code, based on the older standard, is not called properly when using the newer version of \gls{w2p}. This doesn't stop the successful assembly of an \acrshort{eden} \gls{sa}, but once that \gls{sa} is assembled most of its functionality in inaccessible because the \acrshort{eden}-specific data validation code won't run and so the system won't accept that data.

   This problem is interesting because it turns out it captures a moment in time between the \gls{w2p} team and the teams that use \gls{w2p} (i.e. \acrshort{eden}). If I had selected a slightly earlier version of \gls{w2p}, then it would have used the old system and the \acrshort{eden} code would remain functional. \gls{w2p} immediately realized the problem and accepted a fix\sepfootnote{problemfix} for the issue. This is exactly what \citet{Mackenzie2006-hb} describes when talking about the management of relationships between software components. The \gls{w2p} successfully implemented a new way of handling data validation control flow, but they neglected that they were doing it in such a way as to break an existing relationship they did not mean to break. Because I happened to select a version of \gls{w2p} that was temporarily out of relation with \acrshort{eden}, I failed to assemble a fully functional \gls{sa}. This got me interested in assembly.


   \subsection*{Investigating Assembly}






   \printnoidxglossaries
   \setlength{\parindent}{4em}
   \bibliography{Final_Draft}

\end{document}

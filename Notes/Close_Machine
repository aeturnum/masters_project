# Close to the Machine

Ullman, E. (2012). Close to the Machine: Technophilia and Its Discontents. Picador.

2 timelessness of programming
3 space of code creation
4 permeability of personal contact
5 feelings of sexual and intellectual intimacy
8 ability to disappear into pure logic
11 users exist first in the mind
12 programmer as translator between the world of the machine and the world of humans
14 the code zone
20 the truth jumped out
66 emotional satisfaction of feeling angry at things
76 Idea of the programmer needing to make a system sufficiently scary to enforce user caution about using it
78 spreadsheet as epistemological system
84 computer inability to accommodate the vast permutations of small changes that structure and enable human action
85 Danger of having data and then needing to react to it
86 inevitable desire to link systems
90 computers as projections of epistemic systems
101 acceptance of ignorance required to keep pace with technology
107 being lost in the changing sea of technology
110 constant change means constant ignorance
124 Nothing ends all at once; impossible to stay somewhere you really don't care about
126 capture by computers
133-4 Physical location allows us to interact with others, further up the ladder, more expert. Using electronics to bridge space robs people of that opportunity
173 Engineers as essentially craftspeople, who are in it for the joy of creation

Ultimately, as one might expect from a popular press book and an autobiography, this has less theory in it than one might like. What is there, however, is pretty compelling. I think the notion of the "barrier" between the human world of experience and the cold, precise world of machines will be particularly useful to think and write with. It's a transition I recognize from my own programming experience. I think also the horrible truth of user demands and the inconvience of the inconsistency of reality are all ideas I should at least be keeping in mind, though I'm not sure if I'll cite them.

Can I site this? I don't really know what the standard /is/. Certainly other authors did - it's in all my good software studies books. 